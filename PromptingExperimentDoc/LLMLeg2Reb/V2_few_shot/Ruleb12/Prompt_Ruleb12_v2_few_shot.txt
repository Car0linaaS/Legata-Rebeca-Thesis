Context: Legata is a domain language that describes abstract legal concepts regarding COLREG (Collision Regulations). In Legata there are various clauses that describe different laws and regulations that vessels must adhere to. These clauses are intended for modeling regulatory compliance and simulation of maritime scenarios.
The structure of a clause is as follows:

clause['NameOfClause']:{
condition: {
: Condition1
: Condition2
}
assure: {
: BooleanExpression
}
}

Timed Rebeca (Reactive Objects Language) is used for modeling and simulating concurrent, reactive systems. The code below is part of a model used to simulate vessels, created in Timed Rebeca. 


Example:

Legata clause:
define: {
    OS: OwnShip
}

clause['IstanbulStrait.Clause.1']:{
	condition: {
		: [OwnShip, Map.Sea@TrafficZone].Distance
			in Area.Near.ProximityRange
	}
	assure: {
		: OS.Visibility.Range > kn(.5)
	}
}

Corresponding Rebeca property file:
property{
	define {
		ship1visRangeOK = (s1.vis_range > 926);
		ship2visRangeOK = (s2.vis_range > 926);
		ship1InsideTrafficZone = theMap.ship1_inside_traffic_zone;
		ship2InsideTrafficZone = theMap.ship2_inside_traffic_zone;
		
	}
	Assertion {
		ship1rule622: (!ship1InsideTrafficZone || ship1visRangeOK);
		ship2rule622: (!ship2InsideTrafficZone || ship2visRangeOK);	
	}
}
Explanation:
The distance check between OwnShip and TrafficZone is mapped to ship1InsideTrafficZone
OS.Visibility.Range > kn(.5) is mapped to ship1visRangeOK = (s1.vis_range > 926); where we have used the length of 0.5 nautical miles in meters.


Instruction: In Rebeca syntax, create a property file that represents the law in the Legata clause. We are only interested in Assertions, not TCTL. After generating the property code, explain the intended semantic meaning of the Legata clause, and how the Legata clause attributes/conditions is mapped to the property variables/attributes. 
Allowed operators: <, >, ==, <=, >=, !, ||, &&, ^.
Do not use implication (->, =>) and do not define chained variables in define.

The relevant actors are Ship s1, Ship s2 and MapServer theMap. The actors are modeled like this:

reactiveclass Ship(50) {
	knownrebecs {
		MapServer theMap;
	}
	statevars{
		boolean contains_hazardous;
		int ship_velocity;
	}

reactiveclass MapServer(50) {
	knownrebecs{
		Ship s1;
		Ship s2;
	}
	statevars{
		boolean ship1_inside_istanbul_strait;
		boolean ship2_inside_istanbul_strait;
		int undercurrent;
	}

The property file is constructed like this:
property{
	define {
    Variable = (BooleanExpression);
	}

	Assertion {
        AssertionName: (BooleanExpression);
	}
}

Legata clause to transform: 

# Description: Istanbul Strait protocols
# File: strait.legata
define: {
OS: OwnShip # Convenience macro definitions
}
# (3) Check if the sea current exceeds 4 kn, then large
# vessels, deep-draught vessels and hazardous cargocarrying
# vessels with a speed of 10 kn or less cannot
# enter the strait.

clause['Istanbul.Strait.Rule3.DangerousCargo']:{
    : {
        condition: { 
            :(OS.Cargo in ['HazardousMaterial']) and (OS.Undercurrent > kn(4))
        }
        assure: { 
            :OS.Velocity > kn(10)
        }
    }
}