Context: Legata is a domain language that describes abstract legal concepts regarding COLREG (Collision Regulations). In Legata there are various clauses that describe different laws and regulations that vessels must adhere to. These clauses are intended for modeling regulatory compliance and simulation of maritime scenarios.
The structure of a clause is as follows:

clause['NameOfClause']:{
condition: {
: Condition1
: Condition2
}
assure: {
: BooleanExpression
}
}

Timed Rebeca (Reactive Objects Language) is used for modeling and simulating concurrent, reactive systems. The code below is part of a model used to simulate vessels, created in Timed Rebeca. 


The property file is constructed like this:
property{
	define {
    Variable = (BooleanExpression);
	}

	Assertion {
        AssertionName: (BooleanExpression);
	}
}

Example:

Legata clause:
define: {
    OS: OwnShip
}

clause['IstanbulStrait.Clause.1']:{
	condition: {
		: [OwnShip, Map.Sea@TrafficZone].Distance
			in Area.Near.ProximityRange
	}
	assure: {
		: OS.Visibility.Range > kn(.5)
	}
}

Corresponding Rebeca property file:
property{
	define {
		ship1visRangeOK = (s1.vis_range > 926);
		ship2visRangeOK = (s2.vis_range > 926);
		ship1InsideTrafficZone = theMap.ship1_inside_traffic_zone;
		ship2InsideTrafficZone = theMap.ship2_inside_traffic_zone;
		
	}
	Assertion {
		ship1rule622: (!ship1InsideTrafficZone || ship1visRangeOK);
		ship2rule622: (!ship2InsideTrafficZone || ship2visRangeOK);	
	}
}
Explanation:
The distance check between OwnShip and TrafficZone is mapped to ship1InsideTrafficZone
OS.Visibility.Range > kn(.5) is mapped to ship1visRangeOK = (s1.vis_range > 926); where we have used the length of 0.5 nautical miles in meters.


Instruction: In Rebeca syntax, create a property file that represents the law in the Legata clause. We are only interested in Assertions, not TCTL. After generating the property code, explain the intended semantic meaning of the Legata clause, and how the Legata clause attributes/conditions is mapped to the property variables/attributes. 
Allowed operators: <, >, ==, <=, >=, !, ||, &&, ^.
Do not use implication (->, =>) and do not define chained variables in define.

The relevant actors are Ship s1, Ship s2 and MapServer theMap. The actors are modeled like this:

reactiveclass Ship(50) {
	knownrebecs {
		MapServer theMap;
	}
	statevars{
		int ship_velocity;
		boolean restricted_visibility;
		boolean vessel_type_powerdriven;
		boolean engine_on;
	}

reactiveclass MapServer(50) {
	knownrebecs{
		Ship s1;
		Ship s2;
	}
	statevars{
		int speed_safe_range;
		boolean ships_close_to_each_other;
	}

Legata clause to transform: 


# (a) This Rule applies to vessels not in sight of one another when navigating in 
# or near an area of restricted visibility.
condition: {
    : (
        ((OS, TS).Visible is true) and
        ([OS.Position, Map.Sky@RestrictedVisibility].Distance in Area.Near.SafeRange)
      )

    # Trigger rule 19 overriding other conditions. Useful for rules in cross-reference.
    : OS.Restriction in ['COLREG.Rule19.*']  
}

# (b) Every vessel shall proceed at a safe speed adapted to the prevailing 
# circumstances and conditions of restricted visibility. A power-driven vessel 
# shall have engines ready for immediate manoeuvre.
clause['COLREG.Rule19.b']:{
    : {
        condition: { 
            :(OS.Type is Vessel.Type.PowerDriven) and 
             (OS.Speed in Vessel.RestrictedVisibility.Speed.Safe.Range)
         }
        assure: { 
            :OS.Engine.State in ['Vessel.Engine.ON'] 
        }
    }
}