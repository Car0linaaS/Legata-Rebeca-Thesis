/* Legata clause:

# (a) This Rule applies to vessels not in sight of one another when navigating in 
# or near an area of restricted visibility.
condition: {
    : (
        ((OS, TS).Visible is true) and
        ([OS.Position, Map.Sky@RestrictedVisibility].Distance in Area.Near.SafeRange)
      )

    # Trigger rule 19 overriding other conditions. Useful for rules in cross-reference.
    : OS.Restriction in ['COLREG.Rule19.*']  
}

# (b) Every vessel shall proceed at a safe speed adapted to the prevailing 
# circumstances and conditions of restricted visibility. A power-driven vessel 
# shall have engines ready for immediate manoeuvre.
clause['COLREG.Rule19.b']:{
    : {
        condition: { 
            :(OS.Type is Vessel.Type.PowerDriven) and 
             (OS.Speed in Vessel.RestrictedVisibility.Speed.Safe.Range)
         }
        assure: { 
            :OS.Engine.State in ['Vessel.Engine.ON'] 
        }
    }
}
*/


property{
	define {		
// Rule 19 b
		shipsClose = theMap.ships_close_to_each_other;
		// Ship 1
		ship1restrictedVisibility = s1.restricted_visibility;
		ship1isPowerdriven = s1.vessel_type_powerdriven;
		ship1safeSpeedLowVis = s1.ship_velocity < theMap.speed_safe_range;
		ship1engineOn = s1.engine_on;
		// Ship 2
		ship2restrictedVisibility = s2.restricted_visibility;
		ship2isPowerdriven = s2.vessel_type_powerdriven;
		ship2safeSpeedLowVis = s2.ship_velocity < theMap.speed_safe_range;
		ship2engineOn = s2.engine_on;
	}
	//Om assertion är false löser den ut
	Assertion {
		// Rule 19
		ship1rule19: (!shipsClose || !(ship1restrictedVisibility || ship2restrictedVisibility)) || (!ship1isPowerdriven || ship1safeSpeedLowVis && ship1engineOn);
		ship2rule19: (!shipsClose || !(ship1restrictedVisibility || ship2restrictedVisibility)) || (!ship2isPowerdriven || ship2safeSpeedLowVis && ship2engineOn);
		}
}