reactiveclass Philosopher(3) {
	knownrebecs {
		Chopstick chpL, chpR;
	}
	statevars {
		boolean eating;
		boolean cL, cR;
	}
	Philosopher() {
		cL = false;
		cR = false;
		eating = false;
		self.arrive();
	}

	msgsrv arrive() {
		chpL.request();
	}
	msgsrv permit() {
		if (sender == chpL) {
			if (!cL) {
				cL = true;
				chpR.request();
			}
		} else {
			if (cL && !(cR)) {
				cR = true;
				self.eat();
			}
			/* else discard the message */
		}
	}
	msgsrv eat() {
		eating = true;
		self.leave();
	}
	msgsrv leave() {
		cL = false;
		cR = false;
		eating = false;
		chpL.release();
		chpR.release();
		self.arrive();
	}
}

reactiveclass Chopstick(3) {
	knownrebecs {
		Philosopher philL, philR;
	}
	statevars {
		boolean lAssign, rAssign, leftReq, rightReq;
	}
	Chopstick() {
		lAssign = false;
		rAssign = false;
		leftReq = false;
		rightReq = false;
	}

	msgsrv request() {
		if (sender == philL) {
			if (!leftReq) {
				leftReq = true;
				if (!rAssign) {
					lAssign = true;
					philL.permit();
				}
			} 
			/* else discard message */
		} else {
			if (!rightReq) {
				rightReq = true;
				if (!lAssign) {
					rAssign = true;
					philR.permit();
				}
			}
			/* else discard message */
		}
	}
	msgsrv release() {
		if (sender == philL && lAssign){
			leftReq = false;
			lAssign = false;
			if (rightReq) {
				rAssign=true;
				philR.permit();
			}
		}
		if (sender == philR && rAssign){
			rAssign = false;
			rightReq = false;
			if (leftReq) {
				lAssign=true;
				philL.permit();
			}
		}
	}
}

main {
	Philosopher phil0(chp0, chp2):();
	Philosopher phil1(chp0, chp1):();
	Philosopher phil2(chp1, chp2):();

	Chopstick chp0(phil0, phil1):();
	Chopstick chp1(phil1, phil2):();
	Chopstick chp2(phil2, phil0):();
}