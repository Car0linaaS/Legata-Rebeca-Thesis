reactiveclass Philosopher(2) {
	knownrebecs { 
		Fork forkLeft;
		Fork forkRight;
	}
	statevars{
		boolean leftPickedUp;
		boolean rightPickedUp;
	}
	Philosopher()
		{ 
		leftPickedUp = false;
		rightPickedUp = false;
		self.TryEating();
		/* the constructor */}
	msgsrv TryEating()
	{ 
		if (leftPickedUp == false){
			self.PickUpLeft();
		}
		else if (rightPickedUp == false){
			self.PickUpRight();
		}
		else{
			self.Eat();
		}
	}
	msgsrv Eat()
	{
		leftPickedUp = false;
		rightPickedUp = false;
		self.TryEating();
	}
	msgsrv PickUpLeft()
	{ 
		forkLeft.PickUpFork();
	}
	msgsrv PickUpRight()
	{ 
		forkRight.PickUpFork();
	}
			
	msgsrv LeftForkPickedUp()
	{
		 leftPickedUp = true;
		 self.TryEating();
	}
	msgsrv RightForkPickedUp()
	{
		 rightPickedUp = true;
		 self.TryEating();
	}
	msgsrv (ForkBusy()
	{
		self.TryEating()
	}
}



reactiveclass Fork(2) {
	knownrebecs { 
		Philosopher philLeft;
		Philosopher philRight;
	}
	statevars{
		boolean isAvailable;
//		boolean leftPhilIsWaiting;
//		boolean rightPhilIsWaiting;
//		boolean leftPhilIsUsing;
//		boolean rightPhilIsUsing;
	}
	Fork()
	{ 
		isAbailable = true;
	}

	msgsrv PickUpFork()
	{
		if (sender == philLeft){
			if (isAvailable == true) {
				isAvailable = false;
				//leftPhilIsUsing = true;
				philLeft.RightForkPickedUp();
			}
			else{
				//leftPhilIsWaiting = true;
				philLeft.ForkBusy();
			}
		}
		else{
		if (isAvailable == true) {
				isAvailable = false;
				//rightPhilIsUsing = true;
				philRight.LeftForkPickedUp();
			}
			else{
				//rightPhilIsWaiting = true;
				philRight.ForkBusy();
			}
		}
	 }
}