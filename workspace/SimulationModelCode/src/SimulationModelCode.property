property{
	define {
		onTarget1 = s1.distance2target <=s1.target_tolerance; //s1.rx==s1.targetX && s1.ry==s1.targetY;
		done1 = s1.moves[0]>0 && s1.moves[0]-s1.moveidx<=s1.target_tolerance;
		
		onTarget2 = s2.distance2target <=s2.target_tolerance; //s2.rx==s2.targetX && s2.ry==s2.targetY;
		done2 = s2.moves[0]>0 && s2.moves[0]-s2.moveidx<=s2.target_tolerance;		

		// Good if TRUE
		visRangeOK =  (s1.vis_range > theMap.min_vis_range);
		ship1InsideVTS = theMap.ship1_inside_vts;
		ship2InsideVTS = theMap.ship2_inside_vts;
		
	
		// B.1, first clause
		ship1isOverLengthLimit = s1.ship_length > theMap.max_length; //OK
		ship1isOverDraughtLimit = s1.ship_draught > theMap.max_draught; //OK
		ship1isOverCurrentLimit = theMap.undercurrent > theMap.max_undercurrent; //OK
		// Rules apply if true
		// Is fast enough even if too long/too deep
		ship1isFastEnough = s1.ship_velocity > theMap.min_velocity; //OK
		
	}
	
	Assertion{
		// 6.2.2
		visrange_ship: (visRangeOK || (!ship1InsideVTS)) && (visRangeOK || (!ship2InsideVTS));
	
		// B.1
		s1LargeVesselSafetey: (!(ship1isOverLengthLimit && ship1isOverCurrentLimit) || ship1isFastEnough) && (!(ship1isOverDraughtLimit && ship1isOverCurrentLimit) || ship1isFastEnough);	
		
	
		reached_all: 
		  (!(done1 && onTarget1) || !(done2 && onTarget2)) ^ ((done1 && onTarget1) && (done2 && onTarget2));		
	}
}