property{
	define {
		onTarget1 = s1.distance2target <=s1.target_tolerance; //s1.rx==s1.targetX && s1.ry==s1.targetY;
		done1 = s1.moves[0]>0 && s1.moves[0]-s1.moveidx<=s1.target_tolerance;
		
		onTarget2 = s2.distance2target <=s2.target_tolerance; //s2.rx==s2.targetX && s2.ry==s2.targetY;
		done2 = s2.moves[0]>0 && s2.moves[0]-s2.moveidx<=s2.target_tolerance;		

		// Lägg till ship2
		
		ship1visRangeOK = (s1.vis_range > theMap.min_vis_range);
		ship2visRangeOK = (s2.vis_range > theMap.min_vis_range);
		ship1InsideVTS = theMap.ship1_inside_vts;
		ship2InsideVTS = theMap.ship2_inside_vts;
		
	
		// B.1
		undercurrentsAboveLimit = theMap.undercurrent > theMap.max_undercurrent;
		// Ship1
		ship1isOverLengthLimit = s1.ship_length > theMap.max_length;
		ship1isOverDraughtLimit = s1.ship_draught > theMap.max_draught;
		ship1containsHazardous = s1.contains_hazardous;
		// Is fast enough even if too long/too deep
		ship1isFastEnough = s1.ship_velocity > theMap.min_velocity;
		
		// Ship 2
		ship2isOverLengthLimit = s2.ship_length > theMap.max_length;
		ship2isOverDraughtLimit = s2.ship_draught > theMap.max_draught;
		ship2containsHazardous = s2.contains_hazardous;
		// Is fast enough even if too long/too deep
		ship2isFastEnough = s2.ship_velocity > theMap.min_velocity;
		
		// Rule 19
		shipsClose = theMap.ships_close_to_each_other;	//A
		// Ship 1
		ship1insideFog = s1.is_inside_fog; //B
		ship1isPowerdriven = s1.vessel_type_powerdriven; //C
		ship1safeSpeedLowVis = s1.default_velocity < theMap.speed_safe_range; //D
		ship1engineOn = s1.engine_on; //E
		// Ship 2
		ship2insideFog = s2.is_inside_fog; //F
		ship2isPowerdriven = s2.vessel_type_powerdriven; //G
		ship2safeSpeedLowVis = s2.default_velocity < theMap.speed_safe_range; //H
		ship2engineOn = s2.engine_on; //I
		
	}
	
	Assertion {
		// Rule 19
		safeSpeedInLowVis: (!shipsClose || ((!ship1insideFog || !ship2insideFog) &&
		//Om assertion är false löser den ut
		(!C || D && E)
		(!ship1isPowerdriven || ship1safeSpeedLowVis && ship1engineOn)
		
		
		// 6.2.2
		visrangeShip: (!ship1InsideVTS || ship1visRangeOK) && (!ship2InsideVTS || ship2visRangeOK);
	
		// B.1 first
		s1LargeVesselB1: (!ship1InsideVTS || ((!(ship1isOverLengthLimit && undercurrentsAboveLimit) || ship1isFastEnough) && (!(ship1isOverDraughtLimit && undercurrentsAboveLimit) || ship1isFastEnough)));	
		s2LargeVesselB1: (!ship2InsideVTS || ((!(ship2isOverLengthLimit && undercurrentsAboveLimit) || ship2isFastEnough) && (!(ship2isOverDraughtLimit && undercurrentsAboveLimit) || ship2isFastEnough)));	
		
		// B.1 second
		s1HazardousVesselB1: (!ship1InsideVTS || (!(ship1containsHazardous && undercurrentsAboveLimit) || ship1isFastEnough));	
		s2HazardousVesselB1: (!ship2InsideVTS || (!(ship2containsHazardous && undercurrentsAboveLimit) || ship2isFastEnough));	
		
	
		reached_all: 
		  (!(done1 && onTarget1) || !(done2 && onTarget2)) ^ ((done1 && onTarget1) && (done2 && onTarget2));		
	}
}