property{
	define {
		// Is either ship on target within tolerance? Checks if all have reached their target
		onTarget1 = s1.distance2target <=s1.target_tolerance; 
		done1 = s1.moves[0]>0 && s1.moves[0]-s1.moveidx<=s1.target_tolerance;
		onTarget2 = s2.distance2target <=s2.target_tolerance;
		done2 = s2.moves[0]>0 && s2.moves[0]-s2.moveidx<=s2.target_tolerance;		

		// The ships visual range is good enough for entering Istanbul strait (926 metres or 0.5 nautical miles)
		ship1visRangeOK = (s1.vis_range > 926);
		ship2visRangeOK = (s2.vis_range > 926);
		// Check whether either ship is inside the Istanbul strait traffic zone
		// (different naming because of Legata, same derived value for both) 
		ship1InsideTrafficZone = theMap.ship1_inside_traffic_zone;
		ship2InsideTrafficZone = theMap.ship2_inside_traffic_zone;		
		ship1InsideIstanbulStrait = theMap.ship1_inside_istanbul_strait;
		ship2InsideIstanbulStrait = theMap.ship2_inside_istanbul_strait;
		
		// B.1
		// The undercurrent limit for big ships entering the strait is 4 knots,
		// otherwise they have to have a minimum velocity of 10 knots
		undercurrentsAboveLimit = theMap.undercurrent > 4;
		// Ship 1 Check length/draught limits, or if the ship contains hazardous material
		ship1isOverLengthLimit = s1.ship_length > 150;
		ship1isOverDraughtLimit = s1.ship_draught > 10;
		ship1containsHazardous = s1.contains_hazardous;
		// Check that Ship 1 has a minimum velocity of 10, needed if undercurrent is
		// above 4 and ship is above length/draught limit or contains hazardous material
		ship1isFastEnough = s1.ship_velocity > 10;	
		// Ship 2 Check length/draught limits, or if the ship contains hazardous material
		ship2isOverLengthLimit = s2.ship_length > 150;
		ship2isOverDraughtLimit = s2.ship_draught > 10;
		ship2containsHazardous = s2.contains_hazardous;
		// Check that Ship 2 has a minimum velocity of 10, needed if undercurrent is
		// above 4 and ship is above length/draught limit or contains hazardous material
		ship2isFastEnough = s2.ship_velocity > 10;
		
		// Rule 19 b
		// As there are no specific distance for "ships close to each other" in Colreg
		// we have abstracted that to a boolean
		shipsClose = theMap.ships_close_to_each_other;
		// True if Ship 1 is in fog, and has restricted visibility
		ship1restrictedVisibility = s1.restricted_visibility;
		// True if Ship 1 is power driven
		ship1isPowerdriven = s1.vessel_type_powerdriven;
		// As there are no specific velocity for "safe speed range" in Colreg
		// we have abstracted that
		ship1safeSpeedLowVis = s1.ship_velocity < theMap.speed_safe_range;
		// True if Ship 1's engine is on
		ship1engineOn = s1.engine_on;
		// True if Ship 2 is in fog, and has restricted visibility
		ship2restrictedVisibility = s2.restricted_visibility;
		// True if Ship 2 is power driven
		ship2isPowerdriven = s2.vessel_type_powerdriven;
		// As there are no specific velocity for "safe speed range" in Colreg
		// we have abstracted that
		ship2safeSpeedLowVis = s2.ship_velocity < theMap.speed_safe_range;
		// True if Ship 2's engine is on
		ship2engineOn = s2.engine_on;
		
		// Rule 22 a
		// Ship 1
		ship1LongerThan50m = s1.ship_length > 50;
		ship1LongerThan50mContainsAllLights = s1.masthead_light && s1.side_light && s1.stern_light && s1.towing_light && s1.signal_light;
		ship1LongerThan50mLightRangeOK = s1.masthead_light_range >= 6 && s1.side_light_range >= 3 && s1.stern_light_range >= 3 && s1.towing_light_range >= 3 && s1.signal_light_range >= 3;
		// Ship 2
		ship2LongerThan50m = s2.ship_length > 50;
		ship2LongerThan50mContainsAllLights = s2.masthead_light && s2.side_light && s2.stern_light && s2.towing_light && s2.signal_light;
		ship2LongerThan50mLightRangeOK = s2.masthead_light_range >= 6 && s2.side_light_range >= 3 && s2.stern_light_range >= 3 && s2.towing_light_range >= 3 && s2.signal_light_range >= 3;
		
		// Rule 23
		// Ship 1
		ShipUnderway = s1.underway;
		ShipisPowerdriven = s1.vessel_type_powerdriven;
		ShipLessThan12m = s1.ship_length < 12;
		ShipLessThan50m = s1.ship_length < 50;
		
		MastheadFowardLightOn = s1.masthead_forward_light_on;
		MastheadAbaftLightOn = s1.masthead_abaft_light_on;
		SideLightOn = s1.side_light_on;
		SternlightOn = s1.stern_light_on;
		AllroundLightOn = s1.allround_light_on;
		
		
	}
	Assertion {
		// Rule 23 a
		Rule23a: !ShipUnderway || ShipLessThan12m || !ShipisPowerdriven || ( 
		MastheadFowardLightOn && MastheadAbaftLightOn && SideLightOn && SternlightOn);
		// Rule23a2
		Rule23a2: !ShipUnderway || ShipLessThan50m || !ShipisPowerdriven || (MastheadAbaftLightOn);
		// Rule 23d1
		Rule23d1: !ShipUnderway || !ShipLessThan12m || !ShipisPowerdriven || (AllroundLightOn && SideLightOn);
			
		// Rule 22
		ship1rule22: !ship1LongerThan50m || ship1LongerThan50mContainsAllLights && ship1LongerThan50mLightRangeOK;
		ship2rule22: !ship2LongerThan50m || ship2LongerThan50mContainsAllLights && ship2LongerThan50mLightRangeOK;
		
		// Rule 19
		ship1rule19: (!shipsClose || !(ship1restrictedVisibility || ship2restrictedVisibility)) || (!ship1isPowerdriven || ship1safeSpeedLowVis && ship1engineOn);
		ship2rule19: (!shipsClose || !(ship1restrictedVisibility || ship2restrictedVisibility)) || (!ship2isPowerdriven || ship2safeSpeedLowVis && ship2engineOn);
		
		// 6.2.2
		ship1rule622: (!ship1InsideTrafficZone || ship1visRangeOK);
		ship2rule622: (!ship2InsideTrafficZone || ship2visRangeOK);
		
		// B.1.1
		s1LargeVesselB1: !ship1InsideIstanbulStrait || ship1isFastEnough || !undercurrentsAboveLimit || !(ship1isOverLengthLimit || ship1isOverDraughtLimit);
		s2LargeVesselB1: !ship2InsideIstanbulStrait || ship2isFastEnough || !undercurrentsAboveLimit || !(ship2isOverLengthLimit || ship2isOverDraughtLimit);

		// B.1.2
		s1HazardousVesselB1: (!ship1InsideIstanbulStrait || (!(ship1containsHazardous && undercurrentsAboveLimit) || ship1isFastEnough));	
		s2HazardousVesselB1: (!ship2InsideIstanbulStrait || (!(ship2containsHazardous && undercurrentsAboveLimit) || ship2isFastEnough));
		
		reached_all: 
		  (!(done1 && onTarget1) || !(done2 && onTarget2)) ^ ((done1 && onTarget1) && (done2 && onTarget2));		
	}
}